[quad_gantry_level]
##	Use QUAD_GANTRY_LEVEL to level a gantry.
##	Min & Max gantry corners - measure from nozzle at MIN (0,0) and 
##	MAX (250, 250), (300,300), or (350,350) depending on your printer size
##	to respective belt positions

#--------------------------------------------------------------------
##	Gantry Corners for 300mm Build
##	Uncomment for 300mm build  #TODO PARAMETERIZE
gantry_corners:
	-71,-11
	351,378
##	Probe points
##  This are nozzel positions we need to substract the probe offset
points:
	58,5
	58,235
	288,235
	288,5

#--------------------------------------------------------------------
speed: 500
horizontal_move_z: 7  ; magprobe
retries: 5
retry_tolerance: 0.0051
max_adjust: 8


#####################################################################
#  Macros
#####################################################################
## customize QUAD GANTRY LEVEL gcode 
[gcode_macro QUAD_GANTRY_LEVEL]
description: Conform a moving, twistable gantry to the shape of a stationary bed
rename_existing: QUAD_GANTRY_LEVEL_BASE
gcode:
  #####  get user defines  #####
  {% set park_pos = printer['gcode_macro _USER_VARIABLE'].park_bed %}
  {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop|float %}
  #####  get hardware enables  #####
  {% set ena_mag_probe = printer['gcode_macro _USER_VARIABLE'].mag_probe|lower %}
  ##### get toolhead position #####
  {% set act_z = printer.toolhead.position.z|float %}
  #####  set default  #####
  {% set park = params.PARK|default('false') %}
  #####  end of definitions  #####
  SAVE_GCODE_STATE NAME=STATE_QUAD_GANTRY_LEVEL
  _SET_Z_CURRENT VAL=HOME
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}
  {% if ena_mag_probe == 'true' %}
    {% if act_z < z_hop %}
      G0 Z{z_hop} F300 ; move head up to insure Probe is not triggered in error case
    {% endif %}
    ATTACH_PROBE 
  {% endif %}
  QUAD_GANTRY_LEVEL_BASE
;  {% if ena_mag_probe == 'true' %} DETACH_PROBE {% endif %}
  G28 Z ; klippy
  _SET_Z_CURRENT
  {% if park|lower == 'true' %}
    G90
    G0 Z{park_pos[2]} F300           ; move nozzle to z high first
 ;   G0 X{park_pos[0]} Y{park_pos[1]} F18000 ; home to get toolhead in the middle
  {% endif %}
  RESTORE_GCODE_STATE NAME=STATE_QUAD_GANTRY_LEVEL

;  G28 Z
 
[gcode_macro CHECK_QGL]
description: Run after QUAD_GANTRY_LEVEL to insure it passes
gcode:
  #####  Get user defines  #####
  {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop|float %}
  #####  Get hardware enables  #####
  {% set ena_mag_probe = printer['gcode_macro _USER_VARIABLE'].mag_probe|lower %}
  #####  end of definitions  #####
  # check that after QGL and cancle print in case of failuare
  {% if printer.quad_gantry_level.applied|lower == 'false' %}
    {action_respond_info("QGL CHECK: Fail therefore cancel the print")}
    G90
    G0 Z{z_hop} F300           ; move nozzle to z high first
    {% if ena_mag_probe == 'true' %} DETACH_PROBE {% endif %}
    PAUSE_BASE
    UPDATE_DELAYED_GCODE ID=_EXECUTE_CANCEL_PRINT DURATION=1
  {% else %}
    {action_respond_info("QGL CHECK: Pass")}
  {% endif %}

[delayed_gcode _EXECUTE_CANCEL_PRINT]
gcode:
  CANCEL_PRINT PARK=1 ERROR=1
